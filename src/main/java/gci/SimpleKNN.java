package gci;

import org.jetbrains.annotations.NotNull;

import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;

public class SimpleKNN {
    static class Distance implements Comparable{
        int pointIndex;
        double distance;

        public Distance(int pointIndex, double distance) {
            this.pointIndex = pointIndex;
            this.distance = distance;
        }

        @Override
        public int compareTo(@NotNull Object o) {
            Distance y = (Distance)o;
            if (distance < y.distance) {
                return -1;
            }
            if (distance > y.distance) {
                return 1;
            }
            return 0;
        }

        @Override
        public String toString() {
            return "pointIndex = "+pointIndex+ " distance = "+distance;
        }
    }
    public static double distance(double[] x, double[] y){
        double tmp = 0;
        for(int i=0; i<x.length; i++){
            tmp += Math.pow(x[i]-y[i],2);
        }
        return Math.sqrt(tmp);
    }
    public static int getCategory(int[] indexes,int[] target){
        HashMap<Integer,Integer> cat = new HashMap<>();
        for(int i=0; i< indexes.length;i++){
          cat.merge(target[i],1, (a,b) -> a+b+1);
        }
        Map.Entry<Integer,Integer> max;
        for(Map.Entry<Integer,Integer> e: cat.entrySet()){
            if (max == null)
                max = e;
            System.out.println(e);
            if (e.getValue() > max.getValue())
                max =e;
        }
        return max.getKey();
    }
    public static int predict(int k, double[] x, double[][] data, int[] target){
        PriorityQueue<Distance> q = new PriorityQueue<>();
        for(int i=0;i <data.length;i++){
            q.add(new Distance(i, distance(x,data[i])));
        }
        int vl =0 ;
        for(int i=0;i<k;i++) {
            Distance e = q.remove();
            System.out.println(e + " class = "+target[e.pointIndex]);
            vl += target[e.pointIndex];
        }
        return vl/k;
    }
    public static void main(String[] args) {
        double[][] data = new double[][]{
                {5.1, 3.5, 1.4, 0.2},
                {4.9, 3., 1.4, 0.2},
                {4.7, 3.2, 1.3, 0.2},
                {4.6, 3.1, 1.5, 0.2},
                {5., 3.6, 1.4, 0.2},
                {5.4, 3.9, 1.7, 0.4},
                {4.6, 3.4, 1.4, 0.3},
                {5., 3.4, 1.5, 0.2},
                {4.4, 2.9, 1.4, 0.2},
                {4.9, 3.1, 1.5, 0.1},
                {5.4, 3.7, 1.5, 0.2},
                {4.8, 3.4, 1.6, 0.2},
                {4.8, 3., 1.4, 0.1},
                {4.3, 3., 1.1, 0.1},
                {5.8, 4., 1.2, 0.2},
                {5.7, 4.4, 1.5, 0.4},
                {5.4, 3.9, 1.3, 0.4},
                {5.1, 3.5, 1.4, 0.3},
                {5.7, 3.8, 1.7, 0.3},
                {5.1, 3.8, 1.5, 0.3},
                {5.4, 3.4, 1.7, 0.2},
                {5.1, 3.7, 1.5, 0.4},
                {4.6, 3.6, 1., 0.2},
                {5.1, 3.3, 1.7, 0.5},
                {4.8, 3.4, 1.9, 0.2},
                {5., 3., 1.6, 0.2},
                {5., 3.4, 1.6, 0.4},
                {5.2, 3.5, 1.5, 0.2},
                {5.2, 3.4, 1.4, 0.2},
                {4.7, 3.2, 1.6, 0.2},
                {4.8, 3.1, 1.6, 0.2},
                {5.4, 3.4, 1.5, 0.4},
                {5.2, 4.1, 1.5, 0.1},
                {5.5, 4.2, 1.4, 0.2},
                {4.9, 3.1, 1.5, 0.1},
                {5., 3.2, 1.2, 0.2},
                {5.5, 3.5, 1.3, 0.2},
                {4.9, 3.1, 1.5, 0.1},
                {4.4, 3., 1.3, 0.2},
                {5.1, 3.4, 1.5, 0.2},
                {5., 3.5, 1.3, 0.3},
                {4.5, 2.3, 1.3, 0.3},
                {4.4, 3.2, 1.3, 0.2},
                {5., 3.5, 1.6, 0.6},
                {5.1, 3.8, 1.9, 0.4},
                {4.8, 3., 1.4, 0.3},
                {5.1, 3.8, 1.6, 0.2},
                {4.6, 3.2, 1.4, 0.2},
                {5.3, 3.7, 1.5, 0.2},
                {5., 3.3, 1.4, 0.2},
                {7., 3.2, 4.7, 1.4},
                {6.4, 3.2, 4.5, 1.5},
                {6.9, 3.1, 4.9, 1.5},
                {5.5, 2.3, 4., 1.3},
                {6.5, 2.8, 4.6, 1.5},
                {5.7, 2.8, 4.5, 1.3},
                {6.3, 3.3, 4.7, 1.6},
                {4.9, 2.4, 3.3, 1. },
                {6.6, 2.9, 4.6, 1.3},
                {5.2, 2.7, 3.9, 1.4},
                {5., 2., 3.5, 1. },
                {5.9, 3., 4.2, 1.5},
                {6., 2.2, 4., 1. },
                {6.1, 2.9, 4.7, 1.4},
                {5.6, 2.9, 3.6, 1.3},
                {6.7, 3.1, 4.4, 1.4},
                {5.6, 3., 4.5, 1.5},
                {5.8, 2.7, 4.1, 1. },
                {6.2, 2.2, 4.5, 1.5},
                {5.6, 2.5, 3.9, 1.1},
                {5.9, 3.2, 4.8, 1.8},
                {6.1, 2.8, 4., 1.3},
                {6.3, 2.5, 4.9, 1.5},
                {6.1, 2.8, 4.7, 1.2},
                {6.4, 2.9, 4.3, 1.3},
                {6.6, 3., 4.4, 1.4},
                {6.8, 2.8, 4.8, 1.4},
                {6.7, 3., 5., 1.7},
                {6., 2.9, 4.5, 1.5},
                {5.7, 2.6, 3.5, 1. },
                {5.5, 2.4, 3.8, 1.1},
                {5.5, 2.4, 3.7, 1. },
                {5.8, 2.7, 3.9, 1.2},
                {6., 2.7, 5.1, 1.6},
                {5.4, 3., 4.5, 1.5},
                {6., 3.4, 4.5, 1.6},
                {6.7, 3.1, 4.7, 1.5},
                {6.3, 2.3, 4.4, 1.3},
                {5.6, 3., 4.1, 1.3},
                {5.5, 2.5, 4., 1.3},
                {5.5, 2.6, 4.4, 1.2},
                {6.1, 3., 4.6, 1.4},
                {5.8, 2.6, 4., 1.2},
                {5., 2.3, 3.3, 1. },
                {5.6, 2.7, 4.2, 1.3},
                {5.7, 3., 4.2, 1.2},
                {5.7, 2.9, 4.2, 1.3},
                {6.2, 2.9, 4.3, 1.3},
                {5.1, 2.5, 3., 1.1},
                {5.7, 2.8, 4.1, 1.3},
                {6.3, 3.3, 6., 2.5},
                {5.8, 2.7, 5.1, 1.9},
                {7.1, 3., 5.9, 2.1},
                {6.3, 2.9, 5.6, 1.8},
                {6.5, 3., 5.8, 2.2},
                {7.6, 3., 6.6, 2.1},
                {4.9, 2.5, 4.5, 1.7},
                {7.3, 2.9, 6.3, 1.8},
                {6.7, 2.5, 5.8, 1.8},
                {7.2, 3.6, 6.1, 2.5},
                {6.5, 3.2, 5.1, 2. },
                {6.4, 2.7, 5.3, 1.9},
                {6.8, 3., 5.5, 2.1},
                {5.7, 2.5, 5., 2. },
                {5.8, 2.8, 5.1, 2.4},
                {6.4, 3.2, 5.3, 2.3},
                {6.5, 3., 5.5, 1.8},
                {7.7, 3.8, 6.7, 2.2},
                {7.7, 2.6, 6.9, 2.3},
                {6., 2.2, 5., 1.5},
                {6.9, 3.2, 5.7, 2.3},
                {5.6, 2.8, 4.9, 2. },
                {7.7, 2.8, 6.7, 2. },
                {6.3, 2.7, 4.9, 1.8},
                {6.7, 3.3, 5.7, 2.1},
                {7.2, 3.2, 6., 1.8},
                {6.2, 2.8, 4.8, 1.8},
                {6.1, 3., 4.9, 1.8},
                {6.4, 2.8, 5.6, 2.1},
                {7.2, 3., 5.8, 1.6},
                {7.4, 2.8, 6.1, 1.9},
                {7.9, 3.8, 6.4, 2. },
                {6.4, 2.8, 5.6, 2.2},
                {6.3, 2.8, 5.1, 1.5},
                {6.1, 2.6, 5.6, 1.4},
                {7.7, 3., 6.1, 2.3},
                {6.3, 3.4, 5.6, 2.4},
                {6.4, 3.1, 5.5, 1.8},
                {6., 3., 4.8, 1.8},
                {6.9, 3.1, 5.4, 2.1},
                {6.7, 3.1, 5.6, 2.4},
                {6.9, 3.1, 5.1, 2.3},
                {5.8, 2.7, 5.1, 1.9},
                {6.8, 3.2, 5.9, 2.3},
                {6.7, 3.3, 5.7, 2.5},
                {6.7, 3., 5.2, 2.3},
                {6.3, 2.5, 5., 1.9},
                {6.5, 3., 5.2, 2. },
                {6.2, 3.4, 5.4, 2.3},
                {5.9, 3., 5.1, 1.8}
        };
        int [] target = new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2};
        System.out.println(predict(3, new double[]{6.2, 2.8, 4.8, 1.8}, data, target));
     }


}
